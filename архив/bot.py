import asyncio
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import aiohttp
import aiosqlite
import whisper
import logging

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = "7238748055:AAHbVcV0lXL-odepWAb2QE6PB1Mi9g6eT1w"
OPENROUTER_API_KEY = "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"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

model = whisper.load_model("base")
DB_PATH = "stats.db"
user_histories = {}
MAX_HISTORY = 2
ANTI_SPAM_SECONDS = 10
user_last_message = {}

logging.basicConfig(level=logging.INFO)

# === –ö–ù–û–ü–ö–ò ===
def get_reply_button():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞", callback_data="repeat")]
    ])
    return kb

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
def log_message(user_id, username, text):
    with open("chat_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()} | {user_id} | {username} | {text}\n")

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
async def update_stats(user_id, username):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO users (user_id, username, messages, last_seen)
            VALUES (?, ?, 1, datetime('now'))
            ON CONFLICT(user_id) DO UPDATE SET
                messages = messages + 1,
                last_seen = datetime('now')
            """,
            (user_id, username)
        )
        await db.commit()

# === –ê–ù–¢–ò–°–ü–ê–ú ===
def is_spamming(user_id):
    now = datetime.now()
    last = user_last_message.get(user_id)
    if last and (now - last).total_seconds() < ANTI_SPAM_SECONDS:
        return True
    user_last_message[user_id] = now
    return False

# === GPT-–∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ OpenRouter ===
async def ask_gpt(prompt, user_id):
    history = user_histories.get(user_id, [])
    history.append({"role": "user", "content": prompt})
    if len(history) > MAX_HISTORY * 2:
        history = history[-MAX_HISTORY * 2:]

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json={
                    "model": "anthropic/claude-3-haiku",
                    "messages": history
                },
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "HTTP-Referer": "https://t.me/Trianglejonbot",
                    "X-Title": "TriangleGPTBot"
                }
            ) as resp:
                data = await resp.json()
                if "choices" not in data:
                    logging.error(f"OpenRouter error response: {data}")
                    return "‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É. –ü—Ä–æ–≤–µ—Ä—å –º–æ–¥–µ–ª—å, –∫–ª—é—á –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω."

                reply = data["choices"][0]["message"]["content"]
                history.append({"role": "assistant", "content": reply})
                user_histories[user_id] = history
                return reply
    except Exception as e:
        logging.error(f"GPT connection error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GPT."

# === /start ===
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT.")

# === –¢–ï–ö–°–¢ ===
@dp.message(lambda message: message.text is not None)
async def text_handler(message: types.Message):
    uid = message.from_user.id
    name = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"
    log_message(uid, name, message.text)
    await update_stats(uid, name)

    if is_spamming(uid):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return

    await message.answer("üí≠ –î—É–º–∞—é...")
    reply = await ask_gpt(message.text, uid)
    await message.reply(reply, reply_markup=get_reply_button())

# === –ì–û–õ–û–° ===
@dp.message(lambda message: message.content_type == "voice")
async def voice_handler(message: types.Message):
    uid = message.from_user.id
    name = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"
    file_id = message.voice.file_id
    file = await bot.get_file(file_id)
    voice_path = f"voice_{uid}.ogg"
    await bot.download_file(file.file_path, voice_path)

    await update_stats(uid, name)
    if is_spamming(uid):
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        try:
            os.remove(voice_path)
        except Exception:
            pass
        return

    await message.answer("üîä –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...")
    try:
        result = model.transcribe(voice_path)
        os.remove(voice_path)
        recognized_text = result['text']
        log_message(uid, name, f"[voice] {recognized_text}")
        await message.answer(f"üìù –¢—ã —Å–∫–∞–∑–∞–ª: {recognized_text}")
        await message.answer("üí≠ –î—É–º–∞—é...")
        reply = await ask_gpt(recognized_text, uid)
        await message.reply(reply, reply_markup=get_reply_button())
    except Exception as e:
        logging.error(f"Whisper error: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        try:
            os.remove(voice_path)
        except Exception:
            pass

# === –ö–ù–û–ü–ö–ê "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞" ===
@dp.callback_query(lambda c: c.data == "repeat")
async def repeat_handler(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.from_user.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å:")

# === –°–û–ó–î–ê–ù–ò–ï –ë–î ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                messages INTEGER,
                last_seen TEXT
            )
        """)
        await db.commit()

# === –ó–ê–ü–£–°–ö ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
